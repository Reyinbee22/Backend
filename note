npm init -y
npm install express
npm install nodemon
npm install mongodb
npm install mongoose


INTRODUCTION TO NODE.JS
-Created in 2009 by Ryan Dahl
-created to fix limitations to traditonal web servers
- Problems such as memory issues, time it takes to fetch data i.e
(read and write operations) e.t.c
- Reason why Asynchronous operation was developed

KEY REASONS TO USE NODE.JS
- JavaScript Everywhere: You don't have to change to new language
- Asynchronous Operations: Helps you to handle multiple tasks simultaneously 
- Rich Ecosystem: You can get enough help online
- Scalable
-

ASYNCHRONOUS NATURE OF NODEJS
-This simply means ability to perform multiple tasks simultenously 

BASIC NODE.JS CONCEPTS
- Modules: Resuseable pieces of codes
- Event-driven architecture: Allows you to perform multiple tasks
- npm(Node package Manager): install libaries, saves time and effort.

SETTING NODE.JS ENVIRONMENT
- Download Node
- install Node
- Verify installation (node --version)


EXPRESS JS
- It's used specifically for making building Web Application easy
- Express.js is made from Nodejs


SETTING UP EXPRESS JS
- initialise node (npm init -y)
- Install Express (npm install express)
-

CREATING ROUTES AND HANDLING HTTPS REQUEST

      HTTP - Hypertext Transfer Protocol

- ROUTES are paths to handle request and responses
- HTTP request are more like visiting a website in your browser
- HTTP response is what you get back from the server in your 

TYPES OF HTTP REQUEST
- GET - You fetch data with this request from a server
- POST - used to submit data to the server
- PUT - we use it to update resource on the server
- DELETE - We use this to delete a resource from the server

ANATOMY OF HTTP REQUEST
- URL - Helps you to specify the address of the resource you want to access
- METHOD - Specifies the type of request (GET, POST, PUT, DELETE)
- Headers - additional information about the request e.g content-Type
- BODY: Contains the data to be sent to the server(JSON e.t.c)


HANDLING HTTP REQUEST IN WEB APPLICATION
- 


INSTALLATIONS



CRUDE OPERATION

C - CREATE = POST
R - READ = GET
U - UPDATE = PUT
D - DELETE = DELETE



INDEX.JS <=== PRODUCT.ROUTE.JS <==== PRODUCT.CONROLLER.JS (actions to perform) <=== 

PRODUCT.JS (MODEL)

CODE STATUS

BAD USER REQUEST- 400,401,401...

SERVER ERROR- 500
GOOD RESPONSE - 200, 201, 202.....


